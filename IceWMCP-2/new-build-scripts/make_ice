#! /usr/bin/env python
import os

FROM_DIR="/Compile/cvs/IceWMCP-2/"
TO_DIR="/INSTALL-IceWMCP/"
INSTALL_SHIELD_DIR=FROM_DIR+"PyInstallShield/"

myfiles=[]
mydirs=[]
INSTALL_SHIELD=['PyInstallShield', 'INSTALL-ME.sh']

REMOVES=['doc/','help/','licenses/','locale/','icons/','applets/','applet-icons/','pixmaps/','*.py','*.pyc','*.pyo','*.png']

REMOVES=REMOVES+INSTALL_SHIELD

IGNORED=['Makefile','CreatePot','Root','Entries','Repository','CVS','PyInstallShield','icepref-scripts','build-scripts','icewmcp-developers-release','theme_previews.tar.gz','ICEWMCP_WEB_VERSION','icewmcp.po','icewmcp-icepref.po','icewmcp-iceme.po','icewmcp-ism.po','template.txt','make_dev','make_file_list','make_file_list2','file_list.txt','icewmcp.pot','icepref.pot','iceme.pot','icesound.pot','es.mo','INSTALL-ME.sh','dir.xpm','next.xpm','close.xpm','make_ice_real','install-config.txt','IceWMCPSystem.py','hw-pixmaps','IceWMCPSystem.txt','icewmcp-hw.po','icewmcp-hw.pot','icewmcp-hw.mo','_pyicewmcphw.so','libicewmcphw.so','pyicewmcphw.py','icewmcphw.py','CHANGES_ALL.txt', 'pyicewmcphwc.so', 'new-build-scripts']


def makefilelist(*args):
	print "Listing files"
	os.path.walk(FROM_DIR,doit,None)
	print "Writing 'make_ice_real' script..."
	f=open("make_ice_real","w")
	for yy in REMOVES:
		f.write("rm -fr "+TO_DIR+yy+"\n")
	f.write("mkdir "+TO_DIR+" &> /dev/null\n")
	for yy in mydirs:
		f.write("mkdir "+TO_DIR+yy+" &> /dev/null\n")
	for yy in INSTALL_SHIELD:
		f.write("cp -f "+INSTALL_SHIELD_DIR+yy+" "+TO_DIR+yy+"\n")
	for yy in myfiles:
		f.write("cp -f "+FROM_DIR+yy+" "+TO_DIR+yy+"\n")	
	f.write("convert "+FROM_DIR+"icewmcp.png "+TO_DIR+"install-pix.gif\n")
	f.write("cp -f "+INSTALL_SHIELD_DIR+"install-config.txt  "+TO_DIR+"\n")
	f.write("cp -f "+FROM_DIR+"new-build-scripts/make_file_list   "+TO_DIR+"\n")
	f.write("rm -f "+TO_DIR+"licenses/GPL\n")
	f.write("cd "+TO_DIR+"\n")
	f.write("./make_file_list\n")
	f.write("rm -f "+TO_DIR+"make_file_list\n")
	f.write("echo icewmcp-DONE\n")
	f.flush()
	f.close()
	ff=os.popen("chmod 755 make_ice_real")
	ff.readlines()
	print "Done."
	

def doit(arg,dirname,fnames):
	for ii in IGNORED:
		if dirname.find(ii)>-1: return
	fnames.sort()
	for ii in fnames:
		if ii in IGNORED: continue
		if ii.endswith(".pyc"): continue
		if ii.endswith(".pyo"): continue
		filename=dirname+"/"+ii
		if os.path.isdir(filename): 
			mydirs.append(filename.replace(FROM_DIR,"")+"/")
			continue
		filename=filename.replace(".//","").replace("./","").replace("//","/")
		myfiles.append(filename.replace(FROM_DIR,""))
	 

if __name__ == "__main__":
	makefilelist()