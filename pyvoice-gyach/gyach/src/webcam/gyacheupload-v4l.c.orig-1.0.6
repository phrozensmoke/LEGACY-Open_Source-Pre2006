/* V4L module for the GyachE-Broadcaster program:
   This application is used to send webcam streams to
    Yahoo. Right now this program has only been tested
    with a single Video4Linux device: An OV511 DLink
    C100 USB webcam.  The program uses Video4Linux-1
    for image capture and the libJasper library for Jpeg-2000
    image conversions.  */

/* This program borrows alot of code from both Ayttm and 
    Gyach-E itself, as well as the old 'videodog' program
    for a few decent V4L usage examples.

    It is designed for simplicity, speed, 
    memory-friendliness, and stability: It runs as an EXTERNAL 
    program to Gyach Enhanced, so that if it DOES crash, it 
    crashes ALONE, rather than taking down an entire chat program
    with it. It is a clean, efficient SINGLE-THREADED application 
*/

/*****************************************************************************
 * gyachewebcam.c
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston,
 * MA 02111-1307, USA.
 *
 * Copyright (C) 2003-2004 Erica Andrews (Phrozensmoke ['at'] yahoo.com)
 * Released under the terms of the GPL.
 * *NO WARRANTY*
 *****************************************************************************/
/* 
	Videodog is Copyright (C) 2000, 
	Gleicon S. Moraes - gleicon@uol.com.br rde@linuxbr.com 

	Ayttm is  Copyright (C) 2003, the Ayttm team
	and Copyright (C) 1999-2002, Torrey Searle <tsearle@uci.edu>
*/

# include "gyacheupload.h"

int exit_on_error=0;
int cam_is_open=0;
int x=320, y=240, w=3;
unsigned char *v_device; /* device */
 struct video_picture grab_pic;
 struct video_capability grab_cap;
 struct video_mmap grab_buf;
 int grab_fd, grab_size;
 unsigned char *grab_data;
 char *pnm_buf=NULL;

extern int app_debugger;

/* Hard-coding my own favorite cam settings into here...
    everybody else can update theirs from the config window */

int fix_color=1;
int hue=47104, contrast=65280, brightness=65280, colour=17152;

unsigned char* grab_one(int *, int *);
int grab_init();

void cleanup_v4l() {
	cam_is_open=0;
	if (v_device) {free (v_device); v_device=NULL;}
	if (pnm_buf) {free(pnm_buf); pnm_buf=NULL;}
	if (grab_fd>-1) {
		close (grab_fd);
		grab_fd=-1;
		munmap(grab_data, grab_size);
						}
}

void fix_colour(char *image, int x, int y)
{
   int i;
   char tmp;
   i = x * y;
   while(--i) {
      tmp = image[0];
      image[0] = image[2];
      image[2] = tmp;
      image += 3;
   }
}

void update_cam()
{
   int pnm_size=0;
   unsigned char *my_jasper=NULL;
   unsigned char *grabit=grab_one(&x, &y);

   if (!grabit) {
	show_error_dialog("There was an error reading the webcam image.");
	return;
	} 

 current_pixbuf=gdk_pixbuf_new_from_data(grabit,GDK_COLORSPACE_RGB,FALSE,8,320,240,320*grab_pic.depth/8,NULL,NULL);

	gtk_image_set_from_pixbuf(GTK_IMAGE(current_image), current_pixbuf);
	gdk_pixbuf_unref(current_pixbuf);
	current_pixbuf=NULL;

		while( gtk_events_pending()) {
			gtk_main_iteration();
		}

	/* create a PNM for Jasper, convert to jpeg-2000 and send */
	 if (webcam_connected && image_need_update) { 

	if (!pnm_buf) {
		pnm_buf=malloc(( x * y * w)+1);
					 }

	if (!pnm_buf) {
		show_error_dialog("Not enough memory available.");
		return;
					  }
	pnm_size=snprintf(pnm_buf,  x * y * w , "P6\n%d %d\n255\n%s", x, y, grabit);
		if (app_debugger) {printf("Jasper-conversion-1\n"); fflush(stdout);}
	my_jasper= image_2_jpg(pnm_buf, pnm_size);

		while( gtk_events_pending()) {
			gtk_main_iteration();
		}

	if (my_jasper) {
		if (app_debugger) {
			printf("Jasper-conversion-2..sendiing.\n"); 
			/* printf("Jasper-conversion-2..sending: %d\n", packet_size);  */ 
			fflush(stdout); }
	webcam_send_image(my_jasper, packet_size);
		if (app_debugger) {printf("Jasper-conversion-3..sent\n"); fflush(stdout); }
	free(my_jasper); 
	my_jasper=NULL;
						}
										 								} 	
}

/* signal handler */
void _sighandler (int sig) {
	switch (sig){			
		case SIGINT: /* ctrl+x */
			cleanup_v4l();
			show_error_dialog("Application interrupted: Shutting down.");
			break;
			}
}

void set_picture() {
	if (hue > -1) grab_pic.hue=hue;
	if (contrast > -1) grab_pic.contrast=contrast;
	if (brightness > -1) grab_pic.brightness=brightness;
	if (colour > -1) grab_pic.colour=colour;
	if (ioctl(grab_fd, VIDIOCSPICT, &grab_pic) == -1) {
		show_error_dialog("An error occurred at 'ioctl VIDIOCSPICT'.\nCould not set camera properties.");
		return; 
		}
}	
	
void set_video_device(char *myvdev) {
	v_device=strdup(myvdev);
}

void init_cam () {
	signal (SIGINT, _sighandler);
	if (!v_device) {
			show_error_dialog("No Video4Linux device was specified.");
			return;
			}
	if (strlen(v_device)<1) {
			show_error_dialog("No Video4Linux device was specified.");
			return;
			}
	grab_init();
	set_picture();
}


int grab_init() {
        if ((grab_fd = open(v_device,O_RDWR)) == -1 ) {
		show_error_dialog("Could not open Video4Linux device.\nThe device may already be in use.");
		return 0; 
		}
	if (ioctl(grab_fd,VIDIOCGCAP,&grab_cap) == -1) {
		show_error_dialog("An error occurred at 'ioctl VIDIOCGCAP'.\nWrong device.");
		return 0; 
		}
	memset (&grab_pic, 0, sizeof(struct video_picture));
	snprintf(webcam_description, 3, "%s",  "");
	strncpy(webcam_description, grab_cap.name ,28);
	strcat(webcam_description, " V4L1");
	if (ioctl (grab_fd, VIDIOCGPICT, &grab_pic) == -1) {
		show_error_dialog("An error occurred at 'ioctl VIDIOCGPICT'.");
		return 0; 
		}
	

	/* The line below cannot work: we must force use of RGB24 for 
	    PNM image creation */
	/* grab_buf.format=grab_pic.palette; */ 

	/* A V4L device supporting the VIDEO_PALETTE_RGB24
	   ( 24bit RGB) color palette is REQUIRED, Gdk-Pixbuf 
	   can only handle RGB Color spaces, so no support for 
	   greyscale palettes or cams using non-standard, weirdo palettes 
	   at this time */

	grab_buf.format = VIDEO_PALETTE_RGB24;
	grab_buf.frame  = 0;
	grab_buf.width  = x;
	grab_buf.height = y;
	grab_size = x * y * w;
	grab_data = mmap(0,grab_size,PROT_READ|PROT_WRITE,MAP_SHARED,grab_fd,0);
	return(1);
	}
	

void set_vid_properties(int thue, int tcontrast, int tcolor, int tbrightness, int tfc) {
	hue=thue;
	contrast=tcontrast;
	colour=tcolor;
	brightness=tbrightness;
	fix_color=tfc;
	set_picture();
}

unsigned char* grab_one(int *width, int *height) {
	set_picture();

	for (;;) {
		if (-1 == ioctl(grab_fd,VIDIOCMCAPTURE,&grab_buf)) {
			show_error_dialog("An error occurred at 'ioctl VIDIOCMCAPTURE'.");
			return NULL; 
			} else {
				if (-1 == ioctl(grab_fd,VIDIOCSYNC,&grab_buf)) {
					show_error_dialog("An error occurred at 'ioctl VIDIOCSYNC'.");
					return NULL; 
				} else {
					if (fix_color) {fix_colour(grab_data, x, y); }
				 	*width  = grab_buf.width;
				 	*height = grab_buf.height;
				 	return grab_data;
			 	}
			}
			
		}
}


void  start_cam()
{
   current_image = gtk_image_new_from_stock(GTK_STOCK_DIALOG_INFO, GTK_ICON_SIZE_DIALOG);
   init_cam();
   gtk_widget_set_usize(current_image,x,y);
}
